name: Release Extension

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the previous version from the previous commit (only on push to main)
          if [ "${{ github.event_name }}" = "push" ]; then
            git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous commit or package.json"
            if [ -f package.json ]; then
              PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
              git checkout HEAD -- package.json
            else
              PREVIOUS_VERSION="0.0.0"
            fi
            echo "Previous version: $PREVIOUS_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Pull request - skipping version check"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting and type checking
        run: |
          yarn run check-types
          yarn run lint

      - name: Build extension
        run: yarn run package

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Package extension
        run: vsce package

      - name: Get package name
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "filename=$PACKAGE_NAME-$VERSION.vsix" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.package.outputs.version }} \
            ./${{ steps.package.outputs.filename }} \
            --title "Release v${{ steps.package.outputs.version }}" \
            --notes "## Changes in v${{ steps.package.outputs.version }}

          Auto-generated release for version ${{ steps.package.outputs.version }}.

          ### Installation
          Download the \`.vsix\` file and install it in VS Code using:
          - Command Palette: \`Extensions: Install from VSIX...\`
          - Or use CLI: \`code --install-extension ${{ steps.package.outputs.filename }}\`"

  # Optional: Also publish to VS Code Marketplace
  # Uncomment and configure if you want to publish to the marketplace as well
  # publish-marketplace:
  #   needs: [check-version, build-and-release]
  #   if: needs.check-version.outputs.version-changed == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'yarn'
  #     
  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
  #     
  #     - name: Build extension
  #       run: yarn run package
  #     
  #     - name: Publish to VS Code Marketplace
  #       run: npx @vscode/vsce publish -p ${{ secrets.VSCE_PAT }}
